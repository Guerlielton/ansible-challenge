---
- name: Create an instance
  hosts: localhost
  gather_facts: no
  vars:
    # Id your project
    gcp_project: ansible-test
    gcp_cred_kind: serviceaccount
    # Path the  private key credential download  the from the GCP.
    gcp_cred_file: /home/user/credentials/gcp/credential.json
    # Zone your for create instance.
    zone: "us-central1-a"
    # Region your for create instance.
    region: "us-central1"
    # Variable with name the instance.
    name_instance: web-server

  tasks:
    - name: Create a disk {{ name_instance }}
      gcp_compute_disk:
        name: "{{ name_instance }}"
        size_gb: 10
        source_image: "projects/ubuntu-os-cloud/global/images/family/ubuntu-1804-lts"
        zone: "{{ zone }}"
        project: "{{ gcp_project }}"
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
        scopes:
          - https://www.googleapis.com/auth/compute
        state: present
      register: disk

    - name: Create a VPC network {{ name_instance }}
      gcp_compute_network:
        name: "default"
        auto_create_subnetworks: "true"
        project: "{{ gcp_project }}"
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
        scopes:
          - https://www.googleapis.com/auth/compute
        state: present
      register: network

    - name: Create a firewall {{ name_instance }}
      gcp_compute_firewall:
        name: "{{ name_instance }}"
        network: "{{ network }}"
        allowed:
          - ip_protocol: tcp
            # Important is port 80 open it will make the link between the instance and docker container.
            ports: ["80"]
        # Firewall tag for match tag instance
        target_tags:
          - web-server
        source_ranges: ["0.0.0.0/0"]
        project: "{{ gcp_project }}"
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
        state: present
      register: firewall

    - name: Create an IPv4 Public IP address {{ name_instance }}
      gcp_compute_address:
        name: "{{ name_instance }}"
        address_type: "EXTERNAL"
        network_tier: "PREMIUM"
        region: "{{ region }}"
        project: "{{ gcp_project }}"
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
        scopes:
          - https://www.googleapis.com/auth/compute
        state: present
      register: address

    - name: Create a instance {{ name_instance }}
      gcp_compute_instance:
        state: present
        name: "{{ name_instance }}"
        machine_type: g1-small
        disks:
          - auto_delete: true
            boot: true
            source: "{{ disk }}"
        network_interfaces:
          - network: "{{ network }}"
            access_configs:
              - name: "External NAT"
                nat_ip: "{{ address }}"
                type: "ONE_TO_ONE_NAT"
        zone: "{{ zone }}"
        project: "{{ gcp_project }}"
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
        scopes:
          - https://www.googleapis.com/auth/compute
        # Network tag for exclusive traffic inbound the instance with tag wer-server
        tags:
          items:
            - web-server
      register: instance
      # This is important in output command for create inventory host.
    - name: Show Details Instance {{ name_instance }}
      debug:
        msg: "The instance is accessible at {{ address.address }}"
      # This is step wait ssh after install the instance.
    - name: Wait for SSH to come up. {{ name_instance }}
      wait_for: host={{ address.address }} port=22 delay=10 timeout=60
